import tkinter as tk
from tkinter import filedialog, messagebox
import serial
import threading

class QPGCommandGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("QPG6200L Hybrid Controller")

        self.serial_port = "COM7"
        self.baud_rate = 115200
        self.serial_conn = None
        self.command_lines = []

        # GUI Layout
        tk.Button(root, text="Connect to QPG6200L", command=self.connect_serial).pack(pady=5)
        self.status_label = tk.Label(root, text="Status: Not connected", fg="red")
        self.status_label.pack()

        # Override packetcount
        override_frame = tk.Frame(root)
        override_frame.pack(pady=5)
        tk.Label(override_frame, text="Override Packet Count:").pack(side=tk.LEFT)
        self.packetcount_entry = tk.Entry(override_frame, width=10)
        self.packetcount_entry.insert(0, "500")
        self.packetcount_entry.pack(side=tk.LEFT)

        # Load and show command file
        tk.Button(root, text="Load Command File", command=self.load_file).pack(pady=5)
        self.command_text = tk.Text(root, height=10, width=60)
        self.command_text.pack()

        # Send commands
        tk.Button(root, text="Send Commands (TX ON)", command=self.send_commands).pack(pady=10)

        # Manual command sender
        tk.Label(root, text="Send Manual Command:").pack()
        self.manual_entry = tk.Entry(root, width=40)
        self.manual_entry.pack()
        tk.Button(root, text="Send", command=self.send_manual_command).pack(pady=5)

    def connect_serial(self):
        try:
            self.serial_conn = serial.Serial(self.serial_port, self.baud_rate, timeout=1)
            self.status_label.config(text="Status: Connected", fg="green")
        except Exception as e:
            messagebox.showerror("Connection Error", str(e))
            self.status_label.config(text="Status: Connection failed", fg="red")

    def load_file(self):
        path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        if not path:
            return
        try:
            with open(path, "r") as f:
                self.command_lines = f.readlines()

            # Apply override for packetcount
            override_count = self.packetcount_entry.get().strip()
            new_lines = []
            for line in self.command_lines:
                if line.strip().lower().startswith("packetcount"):
                    new_lines.append(f"packetcount {override_count}\n")
                else:
                    new_lines.append(line)
            self.command_lines = new_lines

            self.command_text.delete("1.0", tk.END)
            self.command_text.insert(tk.END, "".join(self.command_lines))
        except Exception as e:
            messagebox.showerror("File Error", str(e))

    def send_commands(self):
        if not self.serial_conn or not self.serial_conn.is_open:
            messagebox.showwarning("Not Connected", "Please connect to QPG6200L first.")
            return
        try:
            for line in self.command_lines:
                cmd = line.strip()
                if cmd:
                    print(f"[SEND] {cmd}")
                    self.serial_conn.write((cmd + "\n").encode())
        except Exception as e:
            messagebox.showerror("TX Error", str(e))

    def send_manual_command(self):
        if not self.serial_conn or not self.serial_conn.is_open:
            messagebox.showwarning("Not Connected", "Please connect to QPG6200L first.")
            return
        cmd = self.manual_entry.get().strip()
        if cmd:
            print(f"[MANUAL SEND] {cmd}")
            self.serial_conn.write((cmd + "\n").encode())

if __name__ == "__main__":
    root = tk.Tk()
    app = QPGCommandGUI(root)
    root.mainloop()
