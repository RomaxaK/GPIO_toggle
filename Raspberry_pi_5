import tkinter as tk
from tkinter import filedialog, messagebox
from qorvo.rcc.ptc_versions.v3 import ptcdriver as ptcv3

class QPG6200LApp:
    def __init__(self, root):
        self.root = root
        self.root.title("QPG6200L TX Controller")
        self.tx_device = None
        self.cmd_dict = {}
        self.filename = None

        # GUI Elements
        tk.Button(root, text="Connect TX (COM7)", command=self.connect_tx).pack(pady=5)
        self.status_label = tk.Label(root, text="Not connected", fg="red")
        self.status_label.pack()

        tk.Button(root, text="Load tx.txt", command=self.load_file).pack(pady=5)
        self.text_preview = tk.Text(root, height=12, width=70)
        self.text_preview.pack()

        # TX Start button
        tk.Button(root, text="TX ON (Transmit)", command=self.start_tx).pack(pady=10)

    def connect_tx(self):
        try:
            self.tx_device = ptcv3.PTC.new_connection("COM7:115200")
            info = self.tx_device.get_device_info()
            self.status_label.config(text=f"Connected to: {info}", fg="green")
        except Exception as e:
            messagebox.showerror("Connection Error", str(e))
            self.status_label.config(text="Connection failed", fg="red")

    def load_file(self):
        self.filename = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if not self.filename:
            return
        try:
            with open(self.filename, "r") as f:
                lines = f.readlines()

            self.text_preview.delete("1.0", tk.END)
            self.cmd_dict = {}

            valid_keys = {
                "CH", "AN", "PHY", "POWER", "PACKETLENGTH", "PACKETINTERVAL", "PACKETCOUNT",
                "PM", "MR", "SSA", "SPAN", "SETTXDATA"
            }

            for line in lines:
                stripped = line.strip()
                if not stripped or " " not in stripped:
                    continue  # skip single-word commands like "i", "r", "info", "p"
                try:
                    key, value = stripped.split(None, 1)
                    key = key.upper()
                    if key in valid_keys:
                        self.cmd_dict[key] = value.strip()
                        self.text_preview.insert(tk.END, f"{key} {value.strip()}\n")
                except Exception as e:
                    print(f"[Warning] Skipping malformed line: {stripped} â€” {e}")
        except Exception as e:
            messagebox.showerror("File Error", str(e))

    def start_tx(self):
        if not self.tx_device:
            messagebox.showwarning("Not connected", "Please connect to QPG6200L first.")
            return
        if not self.cmd_dict:
            messagebox.showwarning("No file loaded", "Please load a tx.txt file first.")
            return

        try:
            dev = self.tx_device

            # Apply parsed parameters
            if "CH" in self.cmd_dict:
                dev.channel = int(self.cmd_dict["CH"])
            if "AN" in self.cmd_dict:
                dev.antenna = int(self.cmd_dict["AN"])
            if "PHY" in self.cmd_dict:
                dev.phy = getattr(dev.PhyMode, self.cmd_dict["PHY"].upper())
            if "POWER" in self.cmd_dict:
                dev.power = int(self.cmd_dict["POWER"])
            if "PACKETLENGTH" in self.cmd_dict:
                dev.packet_length = int(self.cmd_dict["PACKETLENGTH"])
            if "PM" in self.cmd_dict:
                dev.pm = self.cmd_dict["PM"].upper() == "ON"
            if "MR" in self.cmd_dict:
                dev.mr = int(self.cmd_dict["MR"])
            if "SSA" in self.cmd_dict:
                dev.ssa = int(self.cmd_dict["SSA"])
            if "SPAN" in self.cmd_dict:
                dev.span = int(self.cmd_dict["SPAN"])
            if "SETTXDATA" in self.cmd_dict:
                dev.settxdata = self.cmd_dict["SETTXDATA"]

            interval = int(self.cmd_dict.get("PACKETINTERVAL", 10))
            count = int(self.cmd_dict.get("PACKETCOUNT", 100))

            # Transmit
            dev.disable_rx_mode()
            dev.reset_packet_counters()
            dev.start_tx_packets(count=count, interval_ms=interval)

            messagebox.showinfo("TX Started", f"Sent {count} packets with {interval}ms interval.")

        except Exception as e:
            messagebox.showerror("TX Error", f"Invalid value in tx.txt: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = QPG6200LApp(root)
    root.mainloop()
