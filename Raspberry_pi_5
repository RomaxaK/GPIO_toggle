import tkinter as tk
from tkinter import filedialog, messagebox
from qorvo.rcc.ptc_versions.v3 import ptcdriver as ptcv3

class QPG6200LApp:
    def __init__(self, root):
        self.root = root
        self.root.title("QPG6200L TX Controller (via SDK)")
        self.tx_device = None
        self.cmd_dict = {}
        self.settxdata = None
        self.filename = None

        # GUI Elements
        tk.Button(root, text="Connect TX (COM7)", command=self.connect_tx).pack(pady=5)
        self.status_label = tk.Label(root, text="Not connected", fg="red")
        self.status_label.pack()

        tk.Button(root, text="Load tx.txt", command=self.load_file).pack(pady=5)
        self.text_preview = tk.Text(root, height=12, width=70)
        self.text_preview.pack()

        tk.Button(root, text="Start TX (TX ON)", command=self.start_tx).pack(pady=10)

    def connect_tx(self):
        try:
            self.tx_device = ptcv3.PTC.new_connection("COM7:115200")
            info = self.tx_device.get_device_info()
            self.status_label.config(text=f"Connected to: {info}", fg="green")
        except Exception as e:
            messagebox.showerror("Connection Error", str(e))
            self.status_label.config(text="Connection failed", fg="red")

    def load_file(self):
        self.filename = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if not self.filename:
            return
        try:
            with open(self.filename, "r") as f:
                lines = f.readlines()

            self.text_preview.delete("1.0", tk.END)
            self.cmd_dict = {}
            self.settxdata = None

            for line in lines:
                stripped = line.strip()
                self.text_preview.insert(tk.END, stripped + "\n")

                if not stripped or " " not in stripped:
                    continue
                key, value = stripped.split(None, 1)
                key = key.upper()
                value = value.strip()

                if key == "SETTXDATA":
                    self.settxdata = value
                elif key not in ["INFO", "I", "R", "P", "TX", "TXON"]:
                    self.cmd_dict[key] = value
        except Exception as e:
            messagebox.showerror("File Error", str(e))

    def start_tx(self):
        if not self.tx_device:
            messagebox.showwarning("Not connected", "Connect to QPG6200L first.")
            return
        if not self.cmd_dict:
            messagebox.showwarning("No file loaded", "Load a tx.txt command file first.")
            return

        try:
            dev = self.tx_device

            if "CH" in self.cmd_dict:
                dev.channel = int(self.cmd_dict["CH"])
            if "AN" in self.cmd_dict:
                an_val = self.cmd_dict["AN"]
                if an_val.upper() == "AUTO":
                    dev.antenna = dev.AntennaValues.AUTO
                elif an_val == "0":
                    dev.antenna = dev.AntennaValues.A0
                elif an_val == "1":
                    dev.antenna = dev.AntennaValues.A1
                else:
                    raise ValueError("AN must be 0, 1, or AUTO")

            if "PHY" in self.cmd_dict:
                dev.phy = getattr(dev.PhyMode, self.cmd_dict["PHY"].upper())
            else:
                dev.phy = dev.PhyMode.BLE  # fallback

            if "POWER" in self.cmd_dict:
                dev.power = int(self.cmd_dict["POWER"])
            if "PACKETLENGTH" in self.cmd_dict:
                dev.packet_length = int(self.cmd_dict["PACKETLENGTH"])
            if "PACKETINTERVAL" in self.cmd_dict:
                interval_ms = int(self.cmd_dict["PACKETINTERVAL"])
            else:
                interval_ms = 10
            if "PACKETCOUNT" in self.cmd_dict:
                count = int(self.cmd_dict["PACKETCOUNT"])
            else:
                count = 100

            for attr in ["PM", "MR", "SSA", "SPAN"]:
                if attr in self.cmd_dict:
                    val = self.cmd_dict[attr]
                    dev.set_attribute(attr, int(val) if val.isdigit() else val)

            if self.settxdata:
                dev.set_attribute("SETTXDATA", self.settxdata)

            dev.disable_rx_mode()
            dev.reset_packet_counters()
            dev.start_tx_packets(count=count, interval_ms=interval_ms)

            messagebox.showinfo("TX started", f"Sent {count} packets at {interval_ms} ms interval")

        except Exception as e:
            messagebox.showerror("TX Error", f"Invalid value in tx.txt: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = QPG6200LApp(root)
    root.mainloop()
