import subprocess
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import re
import threading

class Iperf3Monitor:
    def __init__(self):
        self.times = []
        self.bandwidths = []
        self.time_counter = 0

        self.fig, self.ax = plt.subplots()
        self.ani = animation.FuncAnimation(self.fig, self.update_plot, interval=1000)

        # Start iperf3 in background
        threading.Thread(target=self.run_iperf3, daemon=True).start()

        plt.show()

    def run_iperf3(self):
        cmd = [
            r"C:\Users\rk52524\Downloads\iperf3.12_64\iperf3.exe",
            "-c", "192.168.1.4",
            "-p", "5202",
            "-i", "1",
            "-t", "9999"
        ]
        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )
            print("[iPerf3] Subprocess started")

            for line in iter(process.stdout.readline, ''):
                print(f"[iPerf3 stdout] {line.strip()}")
                match = re.search(r'\s+(\d+\.\d+)\s+Mbits/sec', line)
                if match:
                    bw = float(match.group(1))
                    self.time_counter += 1
                    self.bandwidths.append(bw)
                    self.times.append(self.time_counter)

        except FileNotFoundError:
            print("iperf3 executable not found. Check the path.")
        except Exception as e:
            print(f"Error running iperf3: {e}")

    def update_plot(self, _):
        self.ax.clear()
        self.ax.plot(self.times, self.bandwidths, label="Throughput")
        self.ax.set_title("iPerf3 Bandwidth (Mbits/sec)")
        self.ax.set_xlabel("Time (s)")
        self.ax.set_ylabel("Bandwidth (Mbits/sec)")
        self.ax.legend()
        self.ax.grid(True)

if __name__ == "__main__":
    Iperf3Monitor()
